[project]
name = "gitlab-ci"
version = "2025.05.31.0"
description = "Collection of Gitlab CI/CD workflow templates"
readme = "README.md"
authors = [
    { name = "Alexander Chaykovskiy", email = "<alexchay@gmail.com>" }
]
license = { file = "LICENSE" }
# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [
    "gtilab-ci",
    "python",
    "package",
    "uv"
]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
package-mode = false
packages = []
requires-python = ">=3.10"
dependencies = [
]

[project.urls]
repository = "https://github.com/alexchay/gitlab-ci"
homepage = "https://github.com/alexchay/gitlab-ci"


[tool.uv]
default-groups = []

[dependency-groups]
dev = [
    "pre-commit >=4.2.0, <5.0.0",
    "commitizen >=4.8.2, <5.0.0"
]

test = [
]

docs = [
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
update_changelog_on_bump = true
bump_message = "bump: version $current_version → $new_version"
annotated_tag = false


[tool.bumpversion]
current_version = "2025.05.31.0"
parse = """(?x)                      # Verbose mode
    (?P<release>                     # The release part
        (?:[1-9][0-9]{3})\\.         # "{YYYY}".
        (?:1[0-2]|0[1-9])\\.         # "{0M}".
        (?:3[0-1]|[1-2][0-9]|0[1-9]) # "{0D}"
    )
    (?:\\.(?P<patch>\\d+))?          # .patch, optional
"""
serialize = [
    "{release}.{patch}"
]

search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
tag_name = "{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
sign_tags = false
allow_dirty = false
commit = true
message = "bump: up2date {current_version} → {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[tool.bumpversion.parts.release]
calver_format = "{YYYY}.{0M}.{0D}"
